import pandas
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import functools
import operator
import subprocess
import shutil
import os

plt.style.use('bmh')
mpl.rcParams['lines.linewidth'] = 2.5

raw = pandas.read_csv('cpu-bmarks.csv')
gscale = plt.get_cmap('binary')

mcycle = raw['tbp.cycle']
minsts = raw['minor.insts']

mcpi = (mcycle / minsts)

scycle = raw['sodor.cycle']
sinsts = raw['sodor.insts']
gem5 = raw['gem5.ipc']

scpi = (scycle / sinsts)


gs = mpl.gridspec.GridSpec(1, 10, wspace=0.1, hspace=0.04)

fig = plt.figure()
axes = [fig.add_subplot(gs[0,0:6]),
fig.add_subplot(gs[0,7:10])]

def gmean(a):
    return functools.reduce(operator.mul, a) ** (1.0 / len(a))

def appendgmean(a):
    a = list(a)
    a.append(gmean(a))
    return np.array(a)

mipc = 1.0 / np.array(mcpi)
sipc = 1.0 / np.array(scpi)

gem5ipc = np.array(gem5)

gem5ipc = appendgmean(gem5ipc)
mipc = appendgmean(mipc)
sipc = appendgmean(sipc)

mcpi = appendgmean(mcpi)
scpi = appendgmean(scpi)

xs = np.arange(len(mcpi))

ax = axes[0]

for i in range(3):
    ax.bar(xs * 3.5 + i, [sipc, gem5ipc, mipc][i],
           width=1, label=['sodor', 'gem5', 'ours'][i], color=gscale(0.25 + i * 0.25), edgecolor='white')
    for j, v in enumerate([sipc, gem5ipc, mipc][i]):
        ax.text(j * 3.5 + i, v - 0.15, f'{v:.2f}', ha='center', rotation=90, fontsize=10, color='white', fontweight='bold')

#ax.text(5.5, 1.6, 'Lower CPI is better', fontsize=8)

wl = list(map(lambda x: x, raw['benchmarks']))
ax.set_xticks(xs * 3.5 + 1.75)
ax.set_xticklabels(wl + ['g-mean'], rotation=90, ha='right', fontsize=12)

ax.xaxis.grid(False)
ax.set_axisbelow(True)
ax.legend(ncol=3, handlelength=1, columnspacing=0.5, handletextpad=0.5,
          fontsize=12, frameon=False, bbox_to_anchor=(-0.0, 1.07), loc='upper left')

ax.set_xlim(-0.75, xs[-1] * 3.5 + 3)
ax.set_ylim(0, 1.05)
ax.set_yticks(np.arange(0, 1.01, 0.25))

fig.subplots_adjust(top=0.64, bottom=0.2, left=0.2, right=0.9, wspace=0.5)
ax.set_title('(a) CPU Performance')
ax.set_ylabel('Instructions per Cycle', fontsize=12)


ax = axes[1]

raw = pandas.read_csv('HLS.csv')

bambu_cycle = pandas.to_numeric(raw['bambu.cycle'], errors='coerce').fillna(1000) # handle NA, need to change
assassyn_cycle = pandas.to_numeric(raw['assassyn.cycle'], errors='coerce').fillna(1000) # handle NA, need to change

def average(a):
    return sum(a) / len(a)

def appendavg(a):
    a = list(a)
    a.append(average(a))
    return a

perf = np.array(bambu_cycle) / np.array(assassyn_cycle)
perf = appendgmean(perf)

xs = np.arange(len(perf))

ax.bar(xs, perf, width=0.75, color=gscale(0.5), edgecolor='white')
for i in range(len(perf)):
    ax.text(i, min(perf[i], 3) - 0.42, f'{perf[i]:.2f}', ha='center', rotation=90, fontsize=10, color='white', fontweight='bold')

wl = list(raw['workloads'])
ax.set_xticks(xs + 0.35)
wl[-2] = 'stcl-2d'
ax.set_xticklabels(wl + ['g-mean'], rotation=90, ha='right', fontsize=12)
 
ax.xaxis.grid(False)
ax.set_axisbelow(True)
ax.set_xlim(-0.55, xs[-1] + 0.5)
# #ax.legend(ncol=3, handlelength=1, loc='upper center', handletextpad=0.5, columnspacing=0.5, frameon=False)
# #ax.set_ylim(0.5, 1.8)
# ax.set_yscale('log')
# ax.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
# ax.set_yticks([5000, 10000, 20000, 40000, 80000])
# ax.set_yticklabels(['5k', '10k', '20k', '40k', '80k'])
# ax.set_xlim(-0.75, xs[-1] * 3.5 + 2.6)
# ax.set_ylim(5000, 80000)
# ax.set_ylabel('Simulated Cycles/s (log scale)', fontsize=10)
# 
# ax.text(0, 65000, 'Hatched is generated by verilator.', fontsize=8)

fig.subplots_adjust(top=0.64, bottom=0.2, left=0.12, right=0.95, wspace=0.3)
ax.set_title('(b) Accelerator Perf.')
ax.set_ylabel('Speedup o/ HLS', fontsize=12)
ax.set_ylim(0, 3)

plt.show()

fname = __file__[:-3]
fig.savefig(f'{fname}.pdf')
#subprocess.run(f'pdf-crop-margins -p4 1 1 1 1 {fname}.pdf', shell=True)
#def mv(src, dst):
#    if os.path.exists(dst):
#        os.remove(dst)
#    shutil.move(src, dst)
#mv(f'{fname}_cropped.pdf', f'{fname}.pdf')
