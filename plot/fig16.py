import pandas
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import functools
import operator
import subprocess
import shutil
import os

plt.style.use('bmh')
mpl.rcParams['lines.linewidth'] = 2.5

raw = pandas.read_csv('cpu-bmarks.csv')
gscale = plt.get_cmap('binary')

fig, axes = plt.subplots(1, 2)

def gmean(a):
    return functools.reduce(operator.mul, a) ** (1.0 / len(a))

def appendavg(a):
    avg = sum(a) / len(a)
    a = list(a)
    a.append(avg)
    return a

sodor = raw['sodor.kcycle/s']
asyn  = raw['minor.kcycle/s']
asynv = raw['minor.v.kcycle/s']
gem5 = raw['gem5.kcycle/s']

sodor = appendavg(sodor)
asyn  = appendavg(asyn)
asynv = appendavg(asynv)
gem5 = appendavg(gem5)

xs = np.arange(len(sodor))

ax = axes[0]

to_legend = []
to_legend += [ax.bar(xs * 4.5, sodor, width=0.95, color=gscale(0.8), edgecolor='white', label='Sodor', hatch='//')]
to_legend += [ax.bar(xs * 4.5 + 1, asyn, width=0.95, color=gscale(0.4), edgecolor='white', label='Asyn')]
ax.bar(xs * 4.5 + 2, asynv, width=0.95, color=gscale(0.4), edgecolor='white', label='Asyn.V', hatch='//')
to_legend += [ax.bar(xs * 4.5 + 3, gem5, width=0.95, color=gscale(0.1), edgecolor='k', label='Gem5')]

for i in range(len(asyn)):
    if gem5[i] > 320:
        ax.text(i * 4.5 + 3, 300, f'{gem5[i]:.0f}', ha='center', va='bottom', fontsize=10, weight='bold')

wl = list(map(lambda x: x, raw['benchmarks']))
ax.set_xticks(xs * 4.5 + 1.75)
ax.set_xticklabels(wl + ['avg'], rotation=90, ha='right', fontsize=12)

ax.xaxis.grid(False)
ax.set_axisbelow(True)
ax.legend(to_legend, ['ref', 'asyn', 'gem5'],
        ncol=1, handlelength=1, columnspacing=0.5, handletextpad=0.5,
          fontsize=12, frameon=False, bbox_to_anchor=(-0.05, 1.07), loc='upper left')

ax.set_xlim(-0.75, xs[-1] * 4.5 + 4)
ax.set_yscale('log')
ax.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
ax.set_yticks([10, 20, 40, 80, 160, 320])
ax.set_ylim(0, 320)
#ax.set_yticks(np.arange(0, 1.01, 0.25))

fig.subplots_adjust(top=0.64, bottom=0.2, left=0.2, right=0.9, wspace=0.5)
ax.set_title('CPU Worloads')
ax.set_ylabel('Simulated k-cycles/s', fontsize=12)


ax.text(18, 90, 'Verilator is\nhatched.', fontsize=10)

ax = axes[1]

raw = pandas.read_csv('HLS.csv')

bambu = raw['verilator.k/s']
asn = raw['assassyn.k/s']
asv = raw['av.k/s']

bambu = appendavg(bambu)
asn = appendavg(asn)
asv = appendavg(asv)

xs = np.arange(len(bambu))

ax.bar(xs * 4.5 + 0, bambu, width=0.85, color=gscale(0.8), edgecolor='white', label='Bambu', hatch='//')
ax.bar(xs * 4.5 + 1, asn, width=0.85, color=gscale(0.4), edgecolor='white', label='Asyn')


for i in range(len(asn)):
    if asn[i] > 320:
        ax.text(i * 4.5 + 1, 300, f'{asn[i]:.0f}', ha='center', va='bottom', fontsize=10, weight='bold')

ax.bar(xs * 4.5 + 2, asv, width=0.85, color=gscale(0.4), edgecolor='white', label='Asyn.V', hatch='//')

wl = list(raw['workloads'])
wl[-2] = 'stcl-2d'
ax.set_xticks(xs * 4.5 + 1.75)
ax.set_xticklabels(wl + ['avg'], rotation=90, ha='right', fontsize=12)
#ax.set_yticks(np.arange(0, 81, 20))
#ax.set_yticklabels(['' for x in np.arange(0, 81, 20)])

ax.xaxis.grid(False)
ax.set_axisbelow(True)
ax.set_title('HLS Workloads')
ax.set_xlim(-0.55, xs[-1] * 4.5 + 2.75)
# #ax.legend(ncol=3, handlelength=1, loc='upper center', handletextpad=0.5, columnspacing=0.5, frameon=False)
# #ax.set_ylim(0.5, 1.8)
ax.set_yscale('log')
ax.get_yaxis().set_major_formatter(mpl.ticker.ScalarFormatter())
ax.set_yticks([10, 20, 40, 80, 160, 320])
ax.set_yticklabels(['' for x in [10, 20, 40, 80, 160, 320]])
ax.set_ylim(0, 320)
# ax.set_yticklabels(['5k', '10k', '20k', '40k', '80k'])
# ax.set_xlim(-0.75, xs[-1] * 3.5 + 2.6)
# ax.set_ylim(5000, 80000)
# ax.set_ylabel('Simulated Cycles/s (log scale)', fontsize=10)
# 
# ax.text(0, 65000, 'Hatched is generated by verilator.', fontsize=8)

fig.subplots_adjust(top=0.64, bottom=0.2, left=0.12, right=0.95, wspace=0.05)

plt.show()

fname = __file__[:-3]
fig.savefig(f'{fname}.pdf')
#subprocess.run(f'pdf-crop-margins -p4 1 1 1 1 {fname}.pdf', shell=True)
#def mv(src, dst):
#    if os.path.exists(dst):
#        os.remove(dst)
#    shutil.move(src, dst)
#mv(f'{fname}_cropped.pdf', f'{fname}.pdf')
